#
# CMake Toolchain file for crosscompiling on ARM.
#
# Target operating system name.
set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSTEM_PROCESSOR aarch64)
set(CMAKE_CROSSCOMPILING TRUE)

set(TOOLCHAIN_PATH "/opt/toolchains/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu")

# Name of C compiler.
set(CMAKE_C_COMPILER "${TOOLCHAIN_PATH}/bin/aarch64-none-linux-gnu-gcc")
set(CMAKE_CXX_COMPILER "${TOOLCHAIN_PATH}/bin/aarch64-none-linux-gnu-g++")

# Where to look for the target environment. (More paths can be added here)
#set(CMAKE_FIND_ROOT_PATH ${TOOLCHAIN_PATH})
#set(CMAKE_INCLUDE_PATH  ${TOOLCHAIN_PATH}/include)
#set(CMAKE_LIBRARY_PATH  ${TOOLCHAIN_PATH}/lib)
#set(CMAKE_PROGRAM_PATH  ${TOOLCHAIN_PATH}/bin)

# Adjust the default behavior of the FIND_XXX() commands:
# search programs in the host environment only.
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)

# Search headers and libraries in the target environment only.
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY BOTH)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE BOTH)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE BOTH)

include_directories(${TOOLCHAIN_PATH}/include)
#link_directories(/usr/lib/aarch64-linux-gnu)
#link_directories(${TOOLCHAIN_PATH}/lib)


list(APPEND CMAKE_SYSTEM_LIBRARY_PATH "/usr/lib/aarch64-linux-gnu")
#list(APPEND CMAKE_SYSTEM_LIBRARY_PATH "${TOOLCHAIN_PATH}/lib")

foreach(DIRECTORY IN LISTS CMAKE_SYSTEM_LIBRARY_PATH)
	list(APPEND LINK_DIRS "-L${DIRECTORY}")
	list(APPEND RPATHS "-rpath,${DIRECTORY}")
endforeach()

string(JOIN " " LINK_DIRS ${LINK_DIRS})
string(JOIN "," RPATHS ${RPATHS})

set(LINKER_FLAGS "${LINK_DIRS} -Wl,${RPATHS}")

set(CMAKE_SHARED_LINKER_FLAGS ${LINKER_FLAGS})
set(CMAKE_EXE_LINKER_FLAGS    ${LINKER_FLAGS})
